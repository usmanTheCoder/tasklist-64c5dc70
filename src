'use client'

import { ReactNode } from 'react'
import { Header, Footer } from '@/components/Layout'
import { Provider } from 'react-redux'
import store from '@/redux/store'
import '@/styles/globals.css'

interface RootLayoutProps {
  children: ReactNode
}

const RootLayout = ({ children }: RootLayoutProps) => {
  return (
    <html lang="en">
      <body>
        <Provider store={store}>
          <Header />
          <main>{children}</main>
          <Footer />
        </Provider>
      </body>
    </html>
  )
}

export default RootLayout

'use client'

import { TodoList } from '@/components/Todo'

const Home = () => {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Todo List</h1>
      <TodoList />
    </div>
  )
}

export default Home

'use client'

import { ReactNode } from 'react'
import { Header, Footer } from '@/components/Layout'

interface AuthLayoutProps {
  children: ReactNode
}

const AuthLayout = ({ children }: AuthLayoutProps) => {
  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow">{children}</main>
      <Footer />
    </div>
  )
}

export default AuthLayout

'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useDispatch } from 'react-redux'
import { loginUser } from '@/redux/slices/authSlice'
import { Input, Button } from '@/components/UI'
import { isValidEmail, isValidPassword } from '@/lib/utils/validators'

const LoginPage = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [errors, setErrors] = useState<{ email?: string; password?: string }>({})
  const dispatch = useDispatch()
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const emailError = isValidEmail(email) ? '' : 'Invalid email address'
    const passwordError = isValidPassword(password) ? '' : 'Password must be at least 8 characters long'

    if (emailError || passwordError) {
      setErrors({ email: emailError, password: passwordError })
      return
    }

    try {
      await dispatch(loginUser({ email, password }))
      router.push('/todo')
    } catch (err) {
      console.error('Login failed:', err)
      setErrors({ email: '', password: 'Invalid email or password' })
    }
  }

  return (
    <div className="flex justify-center items-center h-screen">
      <div className="w-full max-w-md">
        <h2 className="text-3xl font-bold mb-6 text-center">Login</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            error={errors.email}
          />
          <Input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            error={errors.password}
          />
          <Button type="submit" className="w-full">
            Login
          </Button>
        </form>
      </div>
    </div>
  )
}

export default LoginPage

'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useDispatch } from 'react-redux'
import { registerUser } from '@/redux/slices/authSlice'
import { Input, Button } from '@/components/UI'
import { isValidEmail, isValidPassword } from '@/lib/utils/validators'

const RegisterPage = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [errors, setErrors] = useState<{ email?: string; password?: string; confirmPassword?: string }>({})
  const dispatch = useDispatch()
  const router = useRouter()

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    const emailError = isValidEmail(email) ? '' : 'Invalid email address'
    const passwordError = isValidPassword(password) ? '' : 'Password must be at least 8 characters long'
    const confirmPasswordError = password === confirmPassword ? '' : 'Passwords do not match'

    if (emailError || passwordError || confirmPasswordError) {
      setErrors({ email: emailError, password: passwordError, confirmPassword: confirmPasswordError })
      return
    }

    try {
      await dispatch(registerUser({ email, password }))
      router.push('/todo')
    } catch (err) {
      console.error('Registration failed:', err)
      setErrors({ email: '', password: '', confirmPassword: 'Registration failed' })
    }
  }

  return (
    <div className="flex justify-center items-center h-screen">
      <div className="w-full max-w-md">
        <h2 className="text-3xl font-bold mb-6 text-center">Register</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            error={errors.email}
          />
          <Input
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            error={errors.password}
          />
          <Input
            type="password"
            placeholder="Confirm Password"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            error={errors.confirmPassword}
          />
          <Button type="submit" className="w-full">
            Register
          </Button>
        </form>
      </div>
    </div>
  )
}

export default RegisterPage

'use client'

import { ReactNode } from 'react'
import { useRouter } from 'next/navigation'
import { useSelector, useDispatch } from 'react-redux'
import { RootState, logout } from '@/redux/slices/authSlice'
import { Header, Footer } from '@/components/Layout'

interface TodoLayoutProps {
  children: ReactNode
}

const TodoLayout = ({ children }: TodoLayoutProps) => {
  const router = useRouter()
  const dispatch = useDispatch()
  const { isAuthenticated } = useSelector((state: RootState) => state.auth)

  const handleLogout = () => {
    dispatch(logout())
    router.push('/auth/login')
  }

  if (!isAuthenticated) {
    router.push('/auth/login')
    return null
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header onLogout={handleLogout} />
      <main className="flex-grow">{children}</main>
      <Footer />
    </div>
  )
}

export default TodoLayout

'use client'

import { useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { RootState, fetchTodos } from '@/redux/slices/todoSlice'
import { TodoList, TodoForm } from '@/components/Todo'

const TodoPage = () => {
  const dispatch = useDispatch()
  const { todos, isLoading, error } = useSelector((state: RootState) => state.todo)

  useEffect(() => {
    dispatch(fetchTodos())
  }, [dispatch])

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div>Error: {error}</div>
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Todo List</h1>
      <TodoForm />
      <TodoList todos={todos} />
    </div>
  )
}

export default TodoPage

'use client'

import { useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useDispatch, useSelector } from 'react-redux'
import { RootState, fetchTodo, updateTodo, deleteTodo } from '@/redux/slices/todoSlice'
import { TodoForm } from '@/components/Todo'
import { Modal, Button } from '@/components/UI'
import { DeleteIcon } from '@/components/Icons'

const TodoDetailPage = () => {
  const router = useRouter()
  const dispatch = useDispatch()
  const { todo, isLoading, error } = useSelector((state: RootState) => state.todo)
  const todoId = router.query.id as string

  useEffect(() => {
    dispatch(fetchTodo(todoId))
  }, [dispatch, todoId])

  const handleUpdate = async (title: string, description: string, completed: boolean) => {
    try {
      await dispatch(updateTodo({ id: todoId, title, description, completed }))
    } catch (err) {
      console.error('Failed to update todo:', err)
    }
  }

  const handleDelete = async () => {
    try {
      await dispatch(deleteTodo(todoId))
      router.push('/todo')
    } catch (err) {
      console.error('Failed to delete todo:', err)
    }
  }

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div>Error: {error}</div>
  }

  if (!todo) {
    return <div>Todo not found</div>
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">Todo Details</h1>
      <TodoForm initialValues={todo} onSubmit={handleUpdate} />
      <div className="mt-8">
        <Modal
          trigger={
            <Button variant="danger" className="flex items-center">
              <DeleteIcon className="mr-2" /> Delete Todo
            </Button>
          }
          title="Delete Todo"
          description="Are you sure you want to delete this todo?"
          confirmText="Delete"
          onConfirm={handleDelete}
        />
      </div>
    </div>
  )
}

export default TodoDetailPage

import { FaCheck } from 'react-icons/fa'

interface CheckIconProps {
  className?: string
}

const CheckIcon = ({ className }: CheckIconProps) => {
  return <FaCheck className={`text-green-500 ${className}`} />
}

export default CheckIcon

import { FaTrashAlt } from 'react-icons/fa'

interface DeleteIconProps {
  className?: string
}

const DeleteIcon = ({ className }: DeleteIconProps) => {
  return <FaTrashAlt className={`text-red-500 ${className}`} />
}

export default DeleteIcon

'use client'

import { useState } from 'react'
import Link from 'next/link'
import { useSelector } from 'react-redux'
import { RootState } from '@/redux/slices/authSlice'
import { Button } from '@/components/UI'

interface HeaderProps {
  onLogout?: () => void
}

const Header = ({ onLogout }: HeaderProps) => {
  const { isAuthenticated } = useSelector((state: RootState) => state.auth)
  const [isOpen, setIsOpen] = useState(false)

  const toggleMenu = () => {
    setIsOpen(!isOpen)
  }

  return (
    <header className="bg-gray-800 text-white py-4">
      <div className="container mx-auto px-4 flex justify-between items-center">
        <Link href="/" className="text-xl font-bold">
          Todo App
        </Link>
        <nav>
          <div className="md:hidden">
            <button
              type="button"
              className="block text-gray-500 hover:text-white focus:text-white focus:outline-none"
              onClick={toggleMenu}
            >
              <svg className="h-6 w-6 fill-current" viewBox="0 0 24 24">
                {isOpen ? (
                  <path
                    fillRule="evenodd"
                    d="M18.278 16.864a1 1 0 0 1-1.414 1.414l-4.829-4.828-4.828 4.828a1 1 0 0 1-1.414-1.414l4.828-4.829-4.828-4.828a1 1 0 0 1 1.414-1.414l4.829 4.828 4.828-4.828a1 1 0 1 1 1.414 1.414l-4.828 4.829 4.828 4.828z"
                  />
                ) : (
                  <path
                    fillRule="evenodd"
                    d="M4 5h16a1 1 0 0 1 0 2H4a1 1 0 1 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2zm0 6h16a1 1 0 0 1 0 2H4a1 1 0 0 1 0-2z"
                  />
                )}
              </svg>
            </button>
          </div>
          <div
            className={`${
              isOpen ? 'block' : 'hidden'
            } md:flex md:items-center md:ml-auto`}
          >
            <div className="md:flex md:items-center">
              <Link
                href="/todo"
                className="block px-4 py-2 mt-2 text-sm md:mt-0 hover:text-gray-300 focus:outline-none focus:shadow-outline"
              >
                Todo List
              </Link>
              {isAuthenticated ? (
                <Button onClick={onLogout} className="ml-4">
                  Logout
                </Button>
              ) : (
                <>
                  <Link
                    href="/auth/login"
                    className="block px-4 py-2 mt-2 text-sm md:mt-0 hover:text-gray-300 focus:outline-none focus:shadow-outline"
                  >
                    Login
                  </Link>
                  <Link
                    href="/auth/register"
                    className="block px-4 py-2 mt-2 text-sm md:mt-0 hover:text-gray-300 focus:outline-none focus:shadow-outline"
                  >